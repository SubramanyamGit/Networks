name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      RESOURCE_GROUP_NAME: "Network-latest-10"
      ADMIN_USERNAME: "azureuser"
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Initialize Terraform
        run: terraform init

      # Check if the Network Security Group (NSG) exists
      - name: Check if NSG exists in Azure
        run: |
          az network nsg show --name Network-NSG --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} || echo "NSG not found"

      # Import the Network Security Group into Terraform state
      - name: Import Network Security Group into Terraform State
        run: |
          terraform import azurerm_network_security_group.nsg "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP_NAME }}/providers/Microsoft.Network/networkSecurityGroups/Network-NSG"

      # Apply the Terraform configuration to ensure the state is up-to-date
      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve

      # Show Terraform state after the import
      - name: Show Terraform State after Import
        run: terraform state list
